import json
from pyspark.sql import SparkSession
import pyspark.sql.functions as psf
import pyspark.sql.types as T

spark: SparkSession = SparkSession.builder.getOrCreate()
spark.sparkContext.setLogLevel('ERROR')


if __name__ == '__main__':

    schema = T.StructType([
        T.StructField("student_name", T.StringType()),
        T.StructField("class_name", T.StringType()),
        T.StructField("score", T.IntegerType())
    ])

    rdd = spark.sparkContext.parallelize([json.dumps([
        {'student_name': 'Song Li', 'class_name': 'General', 'score': 1},
        {'student_name': 'Song Li', 'class_name': 'Math', 'score': 99},
        {'student_name': 'Song Li', 'class_name': 'English', 'score': 99},
        {'student_name': 'Song Li', 'class_name': 'Science', 'score': 99},
        {'student_name': 'Trump', 'class_name': 'General', 'score': 2},
        {'student_name': 'Trump', 'class_name': 'Math', 'score': 33},
        {'student_name': 'Trump', 'class_name': 'English', 'score': 33}
    ])])
    df = spark.read.json(rdd, multiLine=True, mode='FAILFAST', schema=schema)
    df = df.groupBy("student_name").pivot("class_name").agg(psf.max('score'))
    df.show()

    entries = ['General', 'Math', 'English', 'Science']
    expression = 'stack({0}, {1}) as (class_name, score)'.format(
        len(entries), ', '.join(f"'{c}', {c}" for c in entries)
    )

    # Basic example
    print('Basic example')
    df_unpivoted = df.select(
        'student_name',
        psf.expr(expression)
    )
    df_unpivoted.show()

    # It is OK to select columns being unpivoted
    print('It is OK to select columns being unpivoted')
    df_unpivoted = df.select(
        'student_name',
        'General',
        psf.expr(expression)
    )
    df_unpivoted.show()

    # Duplicate entries can be generated by unpivoting
    # Pay attention to 'General'
    print('Duplicate entries can be generated by unpivoting')
    print("Pay attention to 'General'")

    entries = ['General', 'General', 'Math', 'English', 'Science']
    expression = 'stack({0}, {1}) as (class_name, score)'.format(
        len(entries), ', '.join(f"'{c}', {c}" for c in entries)
    )

    df_unpivoted = df.select(
        'student_name',
        'General',
        psf.expr(expression)
    )
    df_unpivoted.show()
